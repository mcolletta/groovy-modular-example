plugins {
    id 'groovy'
    id 'application'
}

def klassName = 'io.modular.example.App'

application {
    mainClass = klassName
}


def currentOS = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem()
def platform = ""
if (currentOS.macOsX) {
    platform = "mac"
} else if (currentOS.linux) {
    platform = "linux"
} else if (currentOS.windows) {
    platform = "win"
}
def javaFXVersion = "23"

def groovyVersion = "4.0.26"

repositories {
    mavenCentral()
}

compileGroovy {
    configure(groovyOptions) {
        configurationScript = file("config/src/main/groovy/compiler-config.groovy")
    }
}

dependencies {
    implementation("org.openjfx:javafx-base:${javaFXVersion}:${platform}")
    implementation("org.openjfx:javafx-controls:${javaFXVersion}:${platform}")
    implementation("org.openjfx:javafx-graphics:${javaFXVersion}:${platform}")
    implementation("org.openjfx:javafx-fxml:${javaFXVersion}:${platform}")
    implementation("org.openjfx:javafx-media:${javaFXVersion}:${platform}")
    implementation("org.openjfx:javafx-swing:${javaFXVersion}:${platform}")

    implementation("org.apache.groovy:groovy:${groovyVersion}")
    implementation("org.apache.groovy:groovy-nio:${groovyVersion}")
    implementation("org.apache.groovy:groovy-xml:${groovyVersion}")
    implementation("org.apache.groovy:groovy-json:${groovyVersion}")
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ["src/main/groovy", "src/main/resources"]
        }
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}


task copyModules(type: Copy) {
    from(configurations.runtimeClasspath).include("javafx-*.jar")
    into("$buildDir/modules")
}

task runApp(type: JavaExec) {
    dependsOn build, copyModules
    description 'Run App'
    mainClass = klassName
    classpath = sourceSets.main.runtimeClasspath

    jvmArgs = [
        "--module-path", "$buildDir/modules",
        "--add-modules=javafx.graphics,javafx.fxml,javafx.swing,javafx.media",
        "--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED",
        "--add-exports", "javafx.base/com.sun.javafx.binding=ALL-UNNAMED",
        "--add-exports", "javafx.base/com.sun.javafx.collections=ALL-UNNAMED",
        "--add-exports", "javafx.base/com.sun.javafx.event=ALL-UNNAMED",
        "--add-exports", "javafx.base/com.sun.javafx.logging=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.application=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.scene.layout=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.scene.input=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.util=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.css=ALL-UNNAMED",
        "--add-exports", "javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED",
        "--add-exports", "java.desktop/com.sun.media.sound=ALL-UNNAMED",
    ]

    if (project.hasProperty('custom_arg')) {
        args project.getProperty('custom_arg')
    }
}

defaultTasks 'runApp'

// gradle --build-file=build.gradle.nm runApp